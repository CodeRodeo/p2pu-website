name: "Terraform"

on:
  push:
    branches:
      - master
  pull_request:
    types: [created]

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init --backend-config="key=tfstate/p2pu-website/${{ steps.extract_branch.outputs.branch }}"
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform apply
        id: apply
        if: github.event_name == 'pull_request'
        run: terraform apply -auto-approve
        #continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform var
        id: site_url
        run: terraform output site_url
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `**Site URL**: [${{ steps.site_url.outputs.stdout }}](https://${{ steps.site_url.outputs.stdout }})`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  jekyll:
    name: "Jekyll"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: build docker image
        run: docker build . -t local/p2pu-website
      - name: setup config
        run: echo "mapbox_access_token: '${{ MAPBOX_ACCESS_TOKEN }}'" > ./_production.yml
      - name: build frontend
        run: docker run --rm -it --volume `pwd`:/opt/app --workdir /opt/app node:12-buster-slim /bin/sh -c "npm install && npm run build"
      - name: get live data for teams
        run: curl https://learningcircles.p2pu.org/api/teams/ -o ./_data/teams.json
      - name: process live data for teams
        run: cat ./_data/teams.json | python3 script/team_pages.py
      - name: build jekyll site
        run: docker run -v `pwd`:/opt/app -v `pwd`/_site:/opt/app/_site local/p2pu-website jekyll build --future --config _config.yml,_production.yml
      - name: test setup
        run: docker run --name=site -d --volume `pwd`/_site:/var/www node:12-buster-slim /bin/sh -c "npm i serve && npx serve /var/www"
      - name: run test
        run: docker run --rm -it --link site --volume `pwd`:/opt/app --workdir /opt/app -e TEST_SERVER_URL=http://site:5000 p2pu/puppeteer-docker /bin/sh -c "npm install --only=dev && npm run test"
      - name: generate redirects
        run: ./script/en_redirects.sh > _data/page_redirects.txt
